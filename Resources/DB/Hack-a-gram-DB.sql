CREATE DATABASE Hack_a_Gram;

USE Hack_a_Gram;

CREATE TABLE IF NOT EXISTS user (
	id INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
	name VARCHAR(50) NOT NULL,
    username VARCHAR(50) NOT NULL,
	email VARCHAR(100) NOT NULL,
	password VARCHAR(200) NOT NULL,
    lastname_1 VARCHAR(100),
    lastname_2 VARCHAR(100),	
	avatar VARCHAR(255),
    bio TEXT,
    url VARCHAR(255),
	privacy ENUM ('private', 'public') DEFAULT 'public',
	createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS follower (
id INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
idUser INT UNSIGNED NOT NULL,
	FOREIGN KEY (idUser) REFERENCES user (id)
    ON UPDATE CASCADE
    ON DELETE CASCADE,	
idFollower INT UNSIGNED NOT NULL,
	FOREIGN KEY (idFollower) REFERENCES user (id)
    ON UPDATE CASCADE
    ON DELETE CASCADE	
);

CREATE TABLE IF NOT EXISTS post (
id INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
authorComment TEXT,

);

CREATE TABLE IF NOT EXISTS hashtag (
id INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
ht1 VARCHAR(50) NOT NULL,
ht2 VARCHAR(50),
ht3 VARCHAR(50),
ht4 VARCHAR(50),
ht5 VARCHAR(50),
ht6 VARCHAR(50),
ht7 VARCHAR(50),
ht8 VARCHAR(50),
ht9 VARCHAR(50),
ht10 VARCHAR(50)
);

CREATE TABLE IF NOT EXISTS post_receives_ht (
id INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
idPost INT UNSIGNED NOT NULL,
FOREIGN KEY (idPost ) REFERENCES post (id)
ON UPDATE CASCADE
ON DELETE CASCADE,
idHt INT UNSIGNED NOT NULL,
FOREIGN KEY (idHt ) REFERENCES hashtag (id)
ON UPDATE CASCADE
ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS photo (
id INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
idPost INT UNSIGNED NOT NULL,
FOREIGN KEY (idPost ) REFERENCES post (id)
ON UPDATE CASCADE
ON DELETE CASCADE,
idUser INT UNSIGNED NOT NULL,
FOREIGN KEY (idUser ) REFERENCES user (id)
ON UPDATE CASCADE
ON DELETE CASCADE,
name VARCHAR(255)
);

CREATE TABLE IF NOT EXISTS likes (
id INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
idPost INT UNSIGNED NOT NULL,
FOREIGN KEY (idPost ) REFERENCES post (id)
ON UPDATE CASCADE
ON DELETE CASCADE,
idUser INT UNSIGNED NOT NULL,
FOREIGN KEY (idUser ) REFERENCES user (id)
ON UPDATE CASCADE
ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS favorite (
id INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
idPost INT UNSIGNED NOT NULL,
FOREIGN KEY (idPost ) REFERENCES post (id)
ON UPDATE CASCADE
ON DELETE CASCADE,
idUser INT UNSIGNED NOT NULL,
FOREIGN KEY (idUser ) REFERENCES user (id)
ON UPDATE CASCADE
ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS comment (
id INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
body TINYTEXT NOT NULL,
createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
idPost INT UNSIGNED NOT NULL,
FOREIGN KEY (idPost ) REFERENCES post (id)
ON UPDATE CASCADE
ON DELETE CASCADE,
idUser INT UNSIGNED NOT NULL,
FOREIGN KEY (idUser ) REFERENCES user (id)
ON UPDATE CASCADE
ON DELETE CASCADE
);